{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shaikh mujammil\\\\OneDrive\\\\Desktop\\\\MY PROJECT\\\\client\\\\src\\\\Pages\\\\MarkdownForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport FileBase from 'react-file-base64';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createPost } from '../actions/posts';\nimport { editPost } from '../actions/dashboardPosts';\nimport '../styles/MarkdownForm.css';\nimport { setCurrentId } from '../actions/currentId';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Form = () => {\n  _s();\n\n  const [postData, setPostData] = useState({\n    title: '',\n    markdown: '',\n    tags: '',\n    selectedFile: ''\n  });\n  const dispatch = useDispatch();\n  const currentId = useSelector(state => state.currentId);\n  const currentPost = useSelector(state => currentId ? state.dashboardPosts.find(post => post._id === currentId) : null);\n  console.log('Dashboard current id', currentId);\n  console.log('Dashboard current post', currentPost);\n  useEffect(() => {\n    if (currentPost) setPostData(currentPost);\n  }, [currentPost]);\n\n  const clear = () => {\n    setCurrentId('');\n    setPostData({\n      title: '',\n      markdown: '',\n      tags: '',\n      selectedFile: ''\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (currentId === '') {\n      dispatch(createPost(postData));\n      clear();\n    } else {\n      dispatch(editPost(currentId, postData));\n      clear();\n    }\n  };\n\n  const handleClear = () => {\n    clear();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"content-form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"form-name\",\n      children: \"Create Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"input\",\n      name: \"title\",\n      value: postData.title,\n      onChange: e => setPostData({ ...postData,\n        title: e.target.value\n      }),\n      placeholder: \"Title\",\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"input\",\n      name: \"markdown\",\n      value: postData.markdown,\n      onChange: e => setPostData({ ...postData,\n        markdown: e.target.value\n      }),\n      placeholder: \"Markdown\",\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"input\",\n      name: \"tags\",\n      value: postData.tags,\n      onChange: e => setPostData({ ...postData,\n        tags: e.target.value.split(',')\n      }),\n      placeholder: \"Tags\",\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FileBase, {\n      type: \"file\",\n      multiple: false,\n      onDone: ({\n        base64\n      }) => setPostData({ ...postData,\n        selectedFile: base64\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-div\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: handleClear,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Form, \"52kZkS+O4B6J7D7/iKQBEyTa4qk=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["C:/Users/shaikh mujammil/OneDrive/Desktop/MY PROJECT/client/src/Pages/MarkdownForm.js"],"names":["React","useEffect","useState","FileBase","useDispatch","useSelector","createPost","editPost","setCurrentId","Form","postData","setPostData","title","markdown","tags","selectedFile","dispatch","currentId","state","currentPost","dashboardPosts","find","post","_id","console","log","clear","handleSubmit","e","preventDefault","handleClear","target","value","split","base64"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport FileBase from 'react-file-base64'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { createPost } from '../actions/posts'\r\nimport { editPost } from '../actions/dashboardPosts'\r\nimport '../styles/MarkdownForm.css'\r\nimport { setCurrentId } from '../actions/currentId'\r\n\r\nconst Form = () => {\r\n\r\n  const [postData, setPostData] = useState({ title: '', markdown: '', tags: '', selectedFile: '' })\r\n  const dispatch = useDispatch()\r\n\r\n  const currentId = useSelector(state => state.currentId)\r\n  const currentPost = useSelector(state => currentId ? state.dashboardPosts.find(post => post._id === currentId) : null)\r\n\r\n\r\n  console.log('Dashboard current id', currentId);\r\n  console.log('Dashboard current post', currentPost);\r\n\r\n  useEffect(() => {\r\n    if (currentPost) setPostData(currentPost)\r\n  }, [currentPost])\r\n\r\n  const clear = () => {\r\n    setCurrentId('')\r\n    setPostData({ title: '', markdown: '', tags: '', selectedFile: '' })\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n\r\n    if (currentId === '') {\r\n      dispatch(createPost(postData))\r\n      clear()\r\n    } else {\r\n      dispatch(editPost(currentId, postData))\r\n      clear()\r\n    }\r\n\r\n  }\r\n\r\n  const handleClear = () => {\r\n    clear()\r\n  }\r\n\r\n  return (\r\n    <form className=\"content-form\" onSubmit={handleSubmit}>\r\n      <h1 className=\"form-name\">Create Post</h1>\r\n      <input\r\n        className=\"input\"\r\n        name=\"title\"\r\n        value={postData.title}\r\n        onChange={e => setPostData({ ...postData, title: e.target.value })}\r\n        placeholder=\"Title\"\r\n        type=\"text\" />\r\n      <textarea\r\n        className=\"input\"\r\n        name=\"markdown\"\r\n        value={postData.markdown}\r\n        onChange={e => setPostData({ ...postData, markdown: e.target.value })}\r\n        placeholder=\"Markdown\"\r\n        type=\"text\" />\r\n      <input\r\n        className=\"input\"\r\n        name=\"tags\"\r\n        value={postData.tags}\r\n        onChange={e => setPostData({ ...postData, tags: e.target.value.split(',') })}\r\n        placeholder=\"Tags\"\r\n        type=\"text\" />\r\n      <FileBase\r\n        type=\"file\"\r\n        multiple={false}\r\n        onDone={({ base64 }) => setPostData({ ...postData, selectedFile: base64 })}\r\n      />\r\n\r\n      <div className=\"btn-div\">\r\n        <button className=\"btn\" type=\"submit\" >Submit</button>\r\n        <button className=\"btn\" onClick={handleClear} >Clear</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form\r\n"]},"metadata":{},"sourceType":"module"}