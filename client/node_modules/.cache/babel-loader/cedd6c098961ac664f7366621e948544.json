{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/shaikh mujammil/OneDrive/Desktop/MY PROJECT/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/shaikh mujammil/OneDrive/Desktop/MY PROJECT/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{fetchSearchedPosts}from'../api';import{setIsLoading}from'./isLoading';export var getSearchedPosts=function getSearchedPosts(currentPage,query){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var _yield$fetchSearchedP,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return fetchSearchedPosts(currentPage,query);case 3:_yield$fetchSearchedP=_context.sent;data=_yield$fetchSearchedP.data;console.log(\"searched data\",data);dispatch(setIsLoading(false));dispatch({type:\"FETCH_ALL\",payload:data});_context.next=13;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](0);console.log(_context.t0);case 13:case\"end\":return _context.stop();}}},_callee,null,[[0,10]]);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["C:/Users/shaikh mujammil/OneDrive/Desktop/MY PROJECT/client/src/actions/searchedPosts.js"],"names":["fetchSearchedPosts","setIsLoading","getSearchedPosts","currentPage","query","dispatch","data","console","log","type","payload"],"mappings":"iWAAA,OAASA,kBAAT,KAAmC,QAAnC,CACA,OAASC,YAAT,KAA6B,aAA7B,CAEA,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,WAAD,CAAcC,KAAd,iGAAwB,iBAAOC,QAAP,uLAG7BL,CAAAA,kBAAkB,CAACG,WAAD,CAAcC,KAAd,CAHW,4CAG5CE,IAH4C,uBAG5CA,IAH4C,CAKpDC,OAAO,CAACC,GAAR,CAAY,eAAZ,CAA6BF,IAA7B,EACAD,QAAQ,CAACJ,YAAY,CAAC,KAAD,CAAb,CAAR,CAEAI,QAAQ,CAAC,CAAEI,IAAI,CAAE,WAAR,CAAqBC,OAAO,CAAEJ,IAA9B,CAAD,CAAR,CARoD,iFAUpDC,OAAO,CAACC,GAAR,cAVoD,qEAAxB,gEAAzB","sourcesContent":["import { fetchSearchedPosts } from '../api'\r\nimport { setIsLoading } from './isLoading'\r\n\r\nexport const getSearchedPosts = (currentPage, query) => async (dispatch) => {\r\n\r\n  try {\r\n    const { data } = await fetchSearchedPosts(currentPage, query)\r\n\r\n    console.log(\"searched data\", data);\r\n    dispatch(setIsLoading(false))\r\n\r\n    dispatch({ type: \"FETCH_ALL\", payload: data })\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}