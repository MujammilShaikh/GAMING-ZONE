{"ast":null,"code":"import _objectSpread from\"C:/Users/shaikh mujammil/OneDrive/Desktop/MY PROJECT/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/Users/shaikh mujammil/OneDrive/Desktop/MY PROJECT/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import FileBase from'react-file-base64';import{useDispatch,useSelector}from'react-redux';import{createPost}from'../actions/posts';import{editPost}from'../actions/dashboardPosts';import'../styles/MarkdownForm.css';import{setCurrentId}from'../actions/currentId';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Form=function Form(){var _useState=useState({title:'',markdown:'',tags:'',selectedFile:''}),_useState2=_slicedToArray(_useState,2),postData=_useState2[0],setPostData=_useState2[1];var dispatch=useDispatch();var currentId=useSelector(function(state){return state.currentId;});var currentPost=useSelector(function(state){return currentId?state.dashboardPosts.find(function(post){return post._id===currentId;}):null;});console.log('Dashboard current id',currentId);console.log('Dashboard current post',currentPost);useEffect(function(){if(currentPost)setPostData(currentPost);},[currentPost]);var clear=function clear(){setCurrentId('');setPostData({title:'',markdown:'',tags:'',selectedFile:''});};var handleSubmit=function handleSubmit(e){e.preventDefault();if(currentId===''){dispatch(createPost(postData));clear();}else{dispatch(editPost(currentId,postData));clear();}};var handleClear=function handleClear(){clear();};return/*#__PURE__*/_jsxs(\"form\",{className:\"content-form\",onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"h1\",{className:\"form-name\",children:\"Add New Post\"}),/*#__PURE__*/_jsx(\"input\",{className:\"input\",name:\"title\",value:postData.title,onChange:function onChange(e){return setPostData(_objectSpread(_objectSpread({},postData),{},{title:e.target.value}));},placeholder:\"Title\",type:\"text\"}),/*#__PURE__*/_jsx(\"textarea\",{className:\"input\",name:\"markdown\",value:postData.markdown,onChange:function onChange(e){return setPostData(_objectSpread(_objectSpread({},postData),{},{markdown:e.target.value}));},placeholder:\"Markdown\",type:\"text\"}),/*#__PURE__*/_jsx(\"input\",{className:\"input\",name:\"tags\",value:postData.tags,onChange:function onChange(e){return setPostData(_objectSpread(_objectSpread({},postData),{},{tags:e.target.value.split(',')}));},placeholder:\"Tags\",type:\"text\"}),/*#__PURE__*/_jsx(FileBase,{type:\"file\",multiple:false,onDone:function onDone(_ref){var base64=_ref.base64;return setPostData(_objectSpread(_objectSpread({},postData),{},{selectedFile:base64}));}}),/*#__PURE__*/_jsxs(\"div\",{className:\"btn-div\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"btn\",type:\"submit\",children:\"Submit\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn\",onClick:handleClear,children:\"Clear\"})]})]});};export default Form;","map":{"version":3,"sources":["C:/Users/shaikh mujammil/OneDrive/Desktop/MY PROJECT/client/src/Pages/MarkdownForm.js"],"names":["React","useEffect","useState","FileBase","useDispatch","useSelector","createPost","editPost","setCurrentId","Form","title","markdown","tags","selectedFile","postData","setPostData","dispatch","currentId","state","currentPost","dashboardPosts","find","post","_id","console","log","clear","handleSubmit","e","preventDefault","handleClear","target","value","split","base64"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport FileBase from 'react-file-base64'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { createPost } from '../actions/posts'\r\nimport { editPost } from '../actions/dashboardPosts'\r\nimport '../styles/MarkdownForm.css'\r\nimport { setCurrentId } from '../actions/currentId'\r\n\r\nconst Form = () => {\r\n\r\n  const [postData, setPostData] = useState({ title: '', markdown: '', tags: '', selectedFile: '' })\r\n  const dispatch = useDispatch()\r\n\r\n  const currentId = useSelector(state => state.currentId)\r\n  const currentPost = useSelector(state => currentId ? state.dashboardPosts.find(post => post._id === currentId) : null)\r\n\r\n\r\n  console.log('Dashboard current id', currentId);\r\n  console.log('Dashboard current post', currentPost);\r\n\r\n  useEffect(() => {\r\n    if (currentPost) setPostData(currentPost)\r\n  }, [currentPost])\r\n\r\n  const clear = () => {\r\n    setCurrentId('')\r\n    setPostData({ title: '', markdown: '', tags: '', selectedFile: '' })\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n\r\n    if (currentId === '') {\r\n      dispatch(createPost(postData))\r\n      clear()\r\n    } else {\r\n      dispatch(editPost(currentId, postData))\r\n      clear()\r\n    }\r\n\r\n  }\r\n\r\n  const handleClear = () => {\r\n    clear()\r\n  }\r\n\r\n  return (\r\n    <form className=\"content-form\" onSubmit={handleSubmit}>\r\n      <h1 className=\"form-name\">Add New Post</h1>\r\n      <input\r\n        className=\"input\"\r\n        name=\"title\"\r\n        value={postData.title}\r\n        onChange={e => setPostData({ ...postData, title: e.target.value })}\r\n        placeholder=\"Title\"\r\n        type=\"text\" />\r\n      <textarea\r\n        className=\"input\"\r\n        name=\"markdown\"\r\n        value={postData.markdown}\r\n        onChange={e => setPostData({ ...postData, markdown: e.target.value })}\r\n        placeholder=\"Markdown\"\r\n        type=\"text\" />\r\n      <input\r\n        className=\"input\"\r\n        name=\"tags\"\r\n        value={postData.tags}\r\n        onChange={e => setPostData({ ...postData, tags: e.target.value.split(',') })}\r\n        placeholder=\"Tags\"\r\n        type=\"text\" />\r\n      <FileBase\r\n        type=\"file\"\r\n        multiple={false}\r\n        onDone={({ base64 }) => setPostData({ ...postData, selectedFile: base64 })}\r\n      />\r\n\r\n      <div className=\"btn-div\">\r\n        <button className=\"btn\" type=\"submit\" >Submit</button>\r\n        <button className=\"btn\" onClick={handleClear} >Clear</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form\r\n"]},"metadata":{},"sourceType":"module"}